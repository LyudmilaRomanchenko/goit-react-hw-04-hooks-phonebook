{"version":3,"sources":["components/ContactForm/ContactForm.module.css","components/Phonebook.module.css","components/ContactElement/ContactElement.module.css","components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","components/ContactElement/ContactElement.js","components/ContactList/ContactList.js","components/ContactForm/ContactForm.js","components/Filter/Filter.js","components/App.js","reportWebVitals.js","index.js"],"names":["module","exports","ContactElement","id","name","number","deleteContact","className","s","button","type","onClick","prototype","PropTypes","string","isRequired","func","checkPropTypes","ContactList","contacts","console","log","list","map","item","ContactForm","addContact","useState","setName","setNumber","handleChange","e","currentTarget","value","find","onSubmit","preventDefault","isContactsIncludes","contact","alert","lableContact","inputContact","onChange","pattern","title","required","arrayOf","shape","Filter","findLable","filter","App","setContacts","setFilter","useEffect","localStorage","getItem","parsedContacts","JSON","parse","setItem","stringify","visibleContact","normalizeTodo","toLowerCase","includes","getVisibleContact","container","phonebookContainer","uuidv4","contactsContainer","todoId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f76d42e2.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"lableContact\":\"ContactForm_lableContact__2MNjq\",\"inputContact\":\"ContactForm_inputContact__2mrmR\",\"button\":\"ContactForm_button__35ZGt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Phonebook_container__35qZo\",\"phonebookContainer\":\"Phonebook_phonebookContainer__hI01l\",\"contactsContainer\":\"Phonebook_contactsContainer__2dqY4\",\"list\":\"Phonebook_list__1mZk7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"number\":\"ContactElement_number__1AFUz\",\"button\":\"ContactElement_button__2VJdY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"ContactList_item__2InYC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"findLable\":\"Filter_findLable__2ky26\",\"find\":\"Filter_find__3xqqZ\"};","import s from \"./ContactElement.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction ContactElement({ id, name, number, deleteContact }) {\n  return (\n    <p>\n      <span>{name}:</span>\n      <span className={s.number}>{number}</span>\n      <button\n        className={s.button}\n        type=\"button\"\n        onClick={() => deleteContact(id)}\n      >\n        Delete\n      </button>\n    </p>\n  );\n}\n\nContactElement.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(ContactElement);\n\nexport default ContactElement;\n","import ContactElement from \"../ContactElement\";\nimport s from \"./ContactList.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction ContactList({ contacts, deleteContact }) {\n  console.log(contacts);\n  return (\n    <ul className={s.list}>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id} className={s.item}>\n          <ContactElement\n            id={id}\n            name={name}\n            number={number}\n            deleteContact={deleteContact}\n          />\n        </li>\n      ))}\n    </ul>\n  );\n}\n\nContactList.prototype = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.number.isRequired,\n\n  deleteContact: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(ContactList);\n\nexport default ContactList;\n","import { useState } from \"react\";\nimport s from \"./ContactForm.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction ContactForm({ addContact, contacts }) {\n  const [name, setName] = useState(\"\");\n  const [number, setNumber] = useState(\"\");\n\n  console.log(contacts);\n\n  const handleChange = (e) => {\n    console.log(e.currentTarget.name);\n    console.log(e.currentTarget.value);\n\n    if (e.currentTarget.name === \"name\") {\n      setName(e.currentTarget.value);\n    }\n\n    if (e.currentTarget.name === \"number\") {\n      setNumber(e.currentTarget.value);\n    }\n  };\n  console.log(name);\n  console.log(number);\n  console.log(contacts.find);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    console.log(contacts);\n\n    const isContactsIncludes = contacts.find(\n      (contact) => console.log(contact.name)\n      // (contact) => contact.name === name\n    );\n\n    console.log(isContactsIncludes);\n\n    if (isContactsIncludes) {\n      return alert(`${name}is alredy in contacts`);\n    } else {\n      addContact(name, number);\n\n      setName(\"\");\n      setNumber(\"\");\n\n      // this.setState({ name: \"\", number: \"\" });\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <label className={s.lableContact}>\n        Name\n        <input\n          className={s.inputContact}\n          type=\"text\"\n          name=\"name\"\n          value={name}\n          onChange={handleChange}\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n          required\n        />\n      </label>\n\n      <label className={s.lableContact}>\n        Number\n        <input\n          className={s.inputContact}\n          type=\"tel\"\n          name=\"number\"\n          value={number}\n          onChange={handleChange}\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n          required\n        />\n      </label>\n\n      <button className={s.button} type=\"submit\">\n        Add contact\n      </button>\n    </form>\n  );\n}\n\nexport default ContactForm;\n\nContactForm.prototype = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.number.isRequired,\n    }).isRequired\n  ),\n  addContact: PropTypes.func.isRequired,\n};\n\n// ContactForm.prototype = {\n//   contacts: PropTypes.arrayOf(\n//     PropTypes.checkPropTypes(\n//       PropTypes.shape({\n//         id: PropTypes.string.isRequired,\n//         name: PropTypes.string.isRequired,\n//         number: PropTypes.number.isRequired,\n//       }).isRequired\n//     )\n//   ),\n//   addContact: PropTypes.func.isRequired,\n// };\n\n// PropTypes.checkPropTypes(ContactForm);\n","// import React from \"react\";\nimport s from \"./Filter.module.css\";\nimport PropTypes from \"prop-types\";\n\nfunction Filter({ value, onChange }) {\n  return (\n    <label className={s.findLable}>\n      Find contacts by name\n      <input\n        className={s.find}\n        type=\"text\"\n        value={value}\n        onChange={onChange}\n      ></input>\n    </label>\n  );\n}\n\nFilter.prototype = {\n  filter: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nPropTypes.checkPropTypes(Filter);\n\nexport default Filter;\n","// import logo from \"./logo.svg\";\n// import \"./App.css\";\nimport { useState, useEffect } from \"react\";\nimport { v4 as uuidv4 } from \"uuid\";\n// import contacts from \"./contacts.json\";\nimport ContactList from \"./ContactList\";\nimport ContactForm from \"./ContactForm\";\nimport Filter from \"./Filter\";\nimport s from \"./Phonebook.module.css\";\n\nfunction App() {\n  const [contacts, setContacts] = useState([]);\n  const [filter, setFilter] = useState(\"\");\n\n  useEffect(() => {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      setContacts(parsedContacts);\n      // this.setState({ contacts: parsedContacts });\n    }\n  }, []);\n\n  // const componentDidMount() {\n  //   const contacts = localStorage.getItem(\"contacts\");\n  //   const parsedContacts = JSON.parse(contacts);\n  //   if (parsedContacts) {\n  //     this.setState({ contacts: parsedContacts });\n  //   }\n  // }\n\n  useEffect(() => {\n    localStorage.setItem(\"contacts\", JSON.stringify(contacts));\n  }, [contacts]);\n\n  // const componentDidUpdate(prevProps, prevState) {\n  //   if (prevState.contacts !== this.state.contacts) {\n  //     localStorage.setItem(\"contacts\", JSON.stringify(this.state.contacts));\n  //   }\n  // }\n\n  const addContact = (name, number) => {\n    const contact = {\n      id: uuidv4(),\n      name: name,\n      number: number,\n    };\n\n    setContacts([contact, ...contacts]);\n\n    // this.setState((prevState) => ({\n    //   contacts: [contact, ...prevState.contacts],\n    // }));\n  };\n\n  const changeFilter = (e) => {\n    console.log(e.currentTarget.value);\n    setFilter(e.currentTarget.value);\n    // this.setState({ filter: e.currentTarget.value });\n  };\n\n  const getVisibleContact = () => {\n    console.log(contacts);\n    const normalizeTodo = filter.toLowerCase();\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizeTodo)\n    );\n  };\n\n  const deleteContact = (todoId) => {\n    setContacts(\n      (contacts) =>\n        (contacts = contacts.filter((contact) => contact.id !== todoId))\n    );\n    // this.setState((prevState) => ({\n    //   contacts: prevState.contacts.filter((contact) => contact.id !== todoId),\n    // }));\n  };\n\n  const visibleContact = getVisibleContact();\n\n  return (\n    <div className={s.container}>\n      <div className={s.phonebookContainer}>\n        <h1>Phonebook</h1>\n        <ContactForm addContact={addContact} contacts={contacts} />\n      </div>\n\n      <div className={s.contactsContainer}>\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={changeFilter} />\n        <ContactList contacts={visibleContact} deleteContact={deleteContact} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}